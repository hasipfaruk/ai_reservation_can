{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Zexa/Desktop/New%20Agent/ai-Reservation-can/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\r\nimport { twMerge } from \"tailwind-merge\"\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs))\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,wIAAA,CAAA,OAAI,AAAD,EAAE;AACtB"}},
    {"offset": {"line": 20, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Zexa/Desktop/New%20Agent/ai-Reservation-can/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst buttonVariants = cva(\r\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default:\r\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\r\n        destructive:\r\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\r\n        outline:\r\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\r\n        secondary:\r\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\r\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\r\n        link: \"text-primary underline-offset-4 hover:underline\",\r\n      },\r\n      size: {\r\n        default: \"h-9 px-4 py-2\",\r\n        sm: \"h-8 rounded-md px-3 text-xs\",\r\n        lg: \"h-10 rounded-md px-8\",\r\n        icon: \"h-9 w-9\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof buttonVariants> {\r\n  asChild?: boolean\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\r\n    const Comp = asChild ? Slot : \"button\"\r\n    return (\r\n      <Comp\r\n        className={cn(buttonVariants({ variant, size, className }))}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    )\r\n  }\r\n)\r\nButton.displayName = \"Button\"\r\n\r\nexport { Button, buttonVariants }\r\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;AAEA;AAHA;;;;;;;AAKA,MAAM,iBAAiB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACvB,ySACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,8JAAM,UAAU,MAC7B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,mKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,OAAO,WAAW,GAAG"}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Zexa/Desktop/New%20Agent/ai-Reservation-can/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Card = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\r\n      \"rounded-xl border bg-card text-card-foreground shadow\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nCard.displayName = \"Card\"\r\n\r\nconst CardHeader = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardHeader.displayName = \"CardHeader\"\r\n\r\nconst CardTitle = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardTitle.displayName = \"CardTitle\"\r\n\r\nconst CardDescription = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardDescription.displayName = \"CardDescription\"\r\n\r\nconst CardContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\r\n))\r\nCardContent.displayName = \"CardContent\"\r\n\r\nconst CardFooter = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"flex items-center p-6 pt-0\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardFooter.displayName = \"CardFooter\"\r\n\r\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\r\n"],"names":[],"mappings":";;;;;;;;;;;;;AAAA;AAEA;;;;;AAEA,MAAM,qBAAO,8JAAM,UAAU,MAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,yDACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,8JAAM,UAAU,OAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,8JAAM,UAAU,OAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,6CAA6C;QAC1D,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,8JAAM,UAAU,OAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,8JAAM,UAAU,OAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,8JAAM,UAAU,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG"}},
    {"offset": {"line": 200, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 211, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Zexa/Desktop/New%20Agent/ai-Reservation-can/src/components/VoiceComponent.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useEffect, useState, useRef } from \"react\";\n\n// ElevenLabs\nimport { useConversation } from \"@11labs/react\";\n\n// UI\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Mic, MicOff, Volume2, VolumeX } from \"lucide-react\";\nimport { refreshReservations } from \"./ReservationTable\";\n\ntype ConversationMessage = {\n  source: 'user' | 'ai';\n  message: string;\n};\n\n// Add type definition for the conversation object to fix TypeScript errors\ninterface ConversationWithSend {\n  startSession: (options: any) => Promise<string>;\n  endSession: () => Promise<void>;\n  setVolume: (options: { volume: number }) => Promise<void>;\n  send: (options: { message: string }) => void;\n  status: string;\n  isSpeaking: boolean;\n}\n\nconst VoiceChat = () => {\n  const [hasPermission, setHasPermission] = useState(false);\n  const [isMuted, setIsMuted] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [pendingReservation, setPendingReservation] = useState<any>(null);\n  const [conversationContext, setConversationContext] = useState<string>(\"\");\n  const [conversationHistory, setConversationHistory] = useState<ConversationMessage[]>([]);\n  const [reservationSuccess, setReservationSuccess] = useState<boolean>(false);\n  const fullConversationText = useRef<string>(\"\");\n  const completeConversationRef = useRef<boolean>(false);\n\n  // When conversation ends, this will be triggered to save the data\n  useEffect(() => {\n    // Only run this effect when conversation is marked as complete\n    if (completeConversationRef.current && conversationHistory.length > 0) {\n      console.log(\"Conversation marked complete, saving final data\");\n      \n      // Submit one final request to save the data\n      const finalConversationText = conversationHistory\n        .map(msg => `${msg.source}: ${msg.message}`)\n        .join(\"\\n\");\n        \n      fetch('/api/reservation', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          message: \"FINAL_SAVE\",\n          conversationContext: finalConversationText\n        }),\n      })\n      .then(response => response.json())\n      .then(data => {\n        if (data.success && data.reservation) {\n          console.log(\"Successfully saved final reservation:\", data.reservation);\n          // Force an immediate refresh of the reservation table\n          forceDataRefresh();\n          setReservationSuccess(true);\n        }\n      })\n      .catch(err => console.error(\"Error saving final data:\", err));\n      \n      // Reset the complete flag\n      completeConversationRef.current = false;\n    }\n  }, [completeConversationRef.current, conversationHistory.length]);\n\n  // Function to force data refresh\n  const forceDataRefresh = () => {\n    console.log(\"Forcing data refresh\");\n    setTimeout(() => {\n      refreshReservations();\n      // Try a second refresh after 2 seconds to ensure data is updated\n      setTimeout(() => {\n        refreshReservations();\n      }, 2000);\n    }, 500);\n  };\n\n  // Update the full conversation text whenever history changes\n  useEffect(() => {\n    if (conversationHistory.length > 0) {\n      fullConversationText.current = conversationHistory\n        .map(msg => `${msg.source}: ${msg.message}`)\n        .join(\"\\n\");\n      console.log(\"Full conversation updated:\", fullConversationText.current);\n    }\n  }, [conversationHistory]);\n\n  // Update the conversation type to include the send method\n  const conversation = useConversation({\n    onConnect: () => {\n      console.log(\"Connected to ElevenLabs\");\n    },\n    onDisconnect: () => {\n      console.log(\"Disconnected from ElevenLabs\");\n      \n      // Mark conversation as complete to trigger the final save effect\n      if (conversationHistory.length > 0) {\n        completeConversationRef.current = true;\n        \n        // Trigger the effect manually since we're in a callback\n        if (completeConversationRef.current && conversationHistory.length > 0) {\n          console.log(\"Conversation disconnected, saving final data\");\n          \n          // Submit one final request to save the data\n          const finalConversationText = conversationHistory\n            .map(msg => `${msg.source}: ${msg.message}`)\n            .join(\"\\n\");\n            \n          fetch('/api/reservation', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ \n              message: \"FINAL_SAVE\",\n              conversationContext: finalConversationText\n            }),\n          })\n          .then(response => response.json())\n          .then(data => {\n            if (data.success && data.reservation) {\n              console.log(\"Successfully saved final reservation:\", data.reservation);\n              // Force an immediate refresh of the reservation table\n              forceDataRefresh();\n              setReservationSuccess(true);\n            } else {\n              console.log(\"No reservation found in final save\");\n            }\n          })\n          .catch(err => console.error(\"Error saving final data:\", err));\n        }\n      }\n      \n      // Reset state when conversation ends\n      setPendingReservation(null);\n      setConversationContext(\"\");\n      setConversationHistory([]);\n      fullConversationText.current = \"\";\n      \n      // Force a final refresh when conversation ends\n      if (reservationSuccess) {\n        forceDataRefresh();\n        setReservationSuccess(false);\n      }\n    },\n    onMessage: async (message) => {\n      console.log(\"Received message:\", message);\n      \n      // Add message to conversation history\n      const newMessage: ConversationMessage = {\n        source: message.source,\n        message: message.message\n      };\n      \n      setConversationHistory(prev => {\n        const updated = [...prev, newMessage];\n        return updated;\n      });\n      \n      try {\n        // Check if this is a confirmation response\n        if (pendingReservation && conversationContext === \"awaiting_confirmation\") {\n          const userMessage = message.message.toLowerCase();\n          \n          // Look for confirmation in the message\n          if (userMessage.includes(\"yes\") || \n              userMessage.includes(\"confirm\") || \n              userMessage.includes(\"correct\") || \n              userMessage.includes(\"that's right\")) {\n            \n            // Send confirmation to the API\n            const confirmResponse = await fetch('/api/reservation', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({ \n                isConfirmation: true, \n                reservationId: pendingReservation.id \n              }),\n            });\n\n            const confirmData = await confirmResponse.json();\n            if (confirmData.success) {\n              console.log('Reservation confirmed:', confirmData.reservation);\n              // Reset the pending reservation now that it's confirmed\n              setPendingReservation(null);\n              setConversationContext(\"\");\n              setReservationSuccess(true);\n              \n              // Trigger an immediate refresh of the reservation table\n              forceDataRefresh();\n              \n              // Respond to the user\n              conversation.send({\n                message: \"Great! Your reservation has been confirmed. We look forward to seeing you!\",\n              });\n            }\n            \n            return;\n          } else if (userMessage.includes(\"no\") || \n                     userMessage.includes(\"cancel\") || \n                     userMessage.includes(\"incorrect\") || \n                     userMessage.includes(\"wrong\")) {\n            \n            // Handle rejection/cancellation\n            setPendingReservation(null);\n            setConversationContext(\"\");\n            \n            // Respond to the user\n            conversation.send({\n              message: \"I understand. Let's start over with the reservation. Please provide your details again.\",\n            });\n            \n            return;\n          }\n        }\n        \n        // Only process for reservation data if it's a user message\n        if (message.source === 'user') {\n          // Send the entire conversation history for context\n          console.log(\"Sending full conversation for analysis:\", fullConversationText.current);\n          \n          // Regular message processing for new reservations\n          const response = await fetch('/api/reservation', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ \n              message: message.message,\n              conversationContext: fullConversationText.current\n            }),\n          });\n\n          const data = await response.json();\n          if (data.success && data.reservation) {\n            console.log('Reservation stored successfully:', data.reservation);\n            \n            // Set the pending reservation\n            setPendingReservation(data.reservation);\n            setConversationContext(\"awaiting_confirmation\");\n            setReservationSuccess(true);\n            \n            // Trigger immediate refresh of the reservation table to show pending reservation\n            forceDataRefresh();\n            \n            // Ask for confirmation\n            if (data.message) {\n              conversation.send({\n                message: data.message + \"\\n\\nIs this information correct? Please say 'yes' to confirm or 'no' to start over.\",\n              });\n            }\n          } else {\n            console.log('No reservation data found in message');\n          }\n        }\n      } catch (error) {\n        console.error(\"Error processing message:\", error);\n      }\n    },\n    onError: (error: string | Error) => {\n      setErrorMessage(typeof error === \"string\" ? error : error.message);\n      console.error(\"Error:\", error);\n    },\n  }) as unknown as ConversationWithSend;\n\n  const { status, isSpeaking } = conversation;\n\n  useEffect(() => {\n    // Request microphone permission on component mount\n    const requestMicPermission = async () => {\n      try {\n        await navigator.mediaDevices.getUserMedia({ audio: true });\n        setHasPermission(true);\n      } catch (error) {\n        setErrorMessage(\"Microphone access denied\");\n        console.error(\"Error accessing microphone:\", error);\n      }\n    };\n\n    requestMicPermission();\n    \n    // When component mounts, refresh the data once\n    forceDataRefresh();\n  }, []);\n\n  const handleStartConversation = async () => {\n    try {\n      // Reset the conversation history when starting a new conversation\n      setConversationHistory([]);\n      fullConversationText.current = \"\";\n      // Replace with your actual agent ID or URL\n      const conversationId = await conversation.startSession({\n        agentId: process.env.NEXT_PUBLIC_ELEVENLABS_AGENT_ID!,\n      });\n      console.log(\"Started conversation:\", conversationId);\n    } catch (error) {\n      setErrorMessage(\"Failed to start conversation\");\n      console.error(\"Error starting conversation:\", error);\n    }\n  };\n\n  const handleEndConversation = async () => {\n    try {\n      // Before ending the conversation, do a final check for reservation data\n      if (conversationHistory.length > 0 && !pendingReservation && !reservationSuccess) {\n        // Try one last time to find reservation data\n        console.log(\"Final check for reservation data before ending conversation\");\n        await checkForReservationData();\n      }\n      \n      await conversation.endSession();\n      // Reset state when conversation ends\n      setPendingReservation(null);\n      setConversationContext(\"\");\n      setConversationHistory([]);\n      fullConversationText.current = \"\";\n      \n      // Force a final refresh\n      if (reservationSuccess) {\n        forceDataRefresh();\n        setReservationSuccess(false);\n      }\n    } catch (error) {\n      setErrorMessage(\"Failed to end conversation\");\n      console.error(\"Error ending conversation:\", error);\n    }\n  };\n\n  // Function to check for reservation data in the conversation\n  const checkForReservationData = async () => {\n    if (conversationHistory.length > 0) {\n      console.log(\"Checking conversation for reservation data\");\n      try {\n        const response = await fetch('/api/reservation', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ \n            message: \"MANUAL_CHECK\",\n            conversationContext: fullConversationText.current\n          }),\n        });\n        \n        const data = await response.json();\n        if (data.success && data.reservation) {\n          setPendingReservation(data.reservation);\n          setConversationContext(\"awaiting_confirmation\");\n          setReservationSuccess(true);\n          forceDataRefresh();\n          conversation.send({\n            message: data.message + \"\\n\\nIs this information correct? Please say 'yes' to confirm or 'no' to start over.\",\n          });\n          return true;\n        } else {\n          console.log('No reservation data found in conversation');\n          return false;\n        }\n      } catch (err) {\n        console.error(\"Error checking reservation data:\", err);\n        return false;\n      }\n    }\n    return false;\n  };\n\n  const handleManualDataCheck = () => {\n    // Use the shared function\n    checkForReservationData();\n  };\n\n  const toggleMute = async () => {\n    try {\n      await conversation.setVolume({ volume: isMuted ? 1 : 0 });\n      setIsMuted(!isMuted);\n    } catch (error) {\n      setErrorMessage(\"Failed to change volume\");\n      console.error(\"Error changing volume:\", error);\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          Voice Chat\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleMute}\n              disabled={status !== \"connected\"}\n            >\n              {isMuted ? (\n                <VolumeX className=\"h-4 w-4\" />\n              ) : (\n                <Volume2 className=\"h-4 w-4\" />\n              )}\n            </Button>\n          </div>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-center\">\n            {status === \"connected\" ? (\n              <div className=\"w-full flex flex-col gap-2\">\n                <Button\n                  variant=\"destructive\"\n                  onClick={handleEndConversation}\n                  className=\"w-full\"\n                >\n                  <MicOff className=\"mr-2 h-4 w-4\" />\n                  End Conversation\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={handleManualDataCheck}\n                  className=\"w-full text-sm\"\n                >\n                  Check Conversation for Reservation\n                </Button>\n              </div>\n            ) : (\n              <Button\n                onClick={handleStartConversation}\n                disabled={!hasPermission}\n                className=\"w-full\"\n              >\n                <Mic className=\"mr-2 h-4 w-4\" />\n                Start Conversation\n              </Button>\n            )}\n          </div>\n\n          <div className=\"text-center text-sm\">\n            {status === \"connected\" && (\n              <p className=\"text-green-600\">\n                {isSpeaking ? \"Agent is speaking...\" : (\n                  pendingReservation && conversationContext === \"awaiting_confirmation\" \n                  ? \"Awaiting confirmation...\" \n                  : \"Listening...\"\n                )}\n              </p>\n            )}\n            {reservationSuccess && (\n              <p className=\"text-blue-600 mt-2\">\n                Reservation data updated. Click \"Refresh Now\" in the table below to view.\n              </p>\n            )}\n            {errorMessage && <p className=\"text-red-500\">{errorMessage}</p>}\n            {!hasPermission && (\n              <p className=\"text-yellow-600\">\n                Please allow microphone access to use voice chat\n              </p>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default VoiceChat;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 794, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}