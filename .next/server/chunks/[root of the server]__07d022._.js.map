{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Zexa/Desktop/New%20Agent/ai-Reservation-can/src/app/api/tables/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/db';\r\n\r\n// Get all tables\r\nexport async function GET() {\r\n  try {\r\n    // Check if Table model is available\r\n    if (!prisma.table) {\r\n      return NextResponse.json({ \r\n        success: false, \r\n        message: 'Table model not available. Please regenerate Prisma client.',\r\n      }, { status: 500 });\r\n    }\r\n    \r\n    try {\r\n      const tables = await prisma.table.findMany({\r\n        include: {\r\n          reservations: true\r\n        }\r\n      });\r\n      \r\n      return NextResponse.json({ success: true, tables });\r\n    } catch (error) {\r\n      console.error('Error querying tables:', error);\r\n      // Return empty tables array as fallback\r\n      return NextResponse.json({ success: true, tables: [] });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error fetching tables:', error);\r\n    return NextResponse.json(\r\n      { \r\n        success: false, \r\n        error: 'Failed to fetch tables',\r\n        details: error instanceof Error ? error.message : String(error)\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// Update table availability\r\nexport async function PUT(request: Request) {\r\n  try {\r\n    // Check if Table model is available\r\n    if (!prisma.table) {\r\n      return NextResponse.json({ \r\n        success: false, \r\n        message: 'Table model not available. Please regenerate Prisma client.',\r\n      }, { status: 500 });\r\n    }\r\n    \r\n    const body = await request.json();\r\n    const { id, isAvailable } = body;\r\n    \r\n    if (!id) {\r\n      return NextResponse.json(\r\n        { success: false, message: 'Table ID is required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    try {\r\n      const updatedTable = await prisma.table.update({\r\n        where: { id: parseInt(id.toString()) },\r\n        data: { \r\n          isAvailable: isAvailable !== undefined ? isAvailable : true\r\n        }\r\n      });\r\n      \r\n      return NextResponse.json({ success: true, table: updatedTable });\r\n    } catch (error) {\r\n      console.error('Error updating table:', error);\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          error: 'Failed to update table',\r\n          details: error instanceof Error ? error.message : String(error)\r\n        },\r\n        { status: 500 }\r\n      );\r\n    }\r\n  } catch (error) {\r\n    console.error('Error handling table update:', error);\r\n    return NextResponse.json(\r\n      { \r\n        success: false, \r\n        error: 'Failed to process table update',\r\n        details: error instanceof Error ? error.message : String(error)\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n} "],"names":[],"mappings":";;;;AAAA;AACA;;;AAGO,eAAe;IACpB,IAAI;QACF,oCAAoC;QACpC,IAAI,CAAC,kHAAA,CAAA,SAAM,CAAC,KAAK,EAAE;YACjB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,SAAS;YACX,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,IAAI;YACF,MAAM,SAAS,MAAM,kHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,QAAQ,CAAC;gBACzC,SAAS;oBACP,cAAc;gBAChB;YACF;YAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAM;YAAO;QACnD,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,0BAA0B;YACxC,wCAAwC;YACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAM,QAAQ,EAAE;YAAC;QACvD;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG,OAAO;QAC3D,GACA;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,oCAAoC;QACpC,IAAI,CAAC,kHAAA,CAAA,SAAM,CAAC,KAAK,EAAE;YACjB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,SAAS;YACX,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,EAAE,EAAE,WAAW,EAAE,GAAG;QAE5B,IAAI,CAAC,IAAI;YACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAAuB,GAClD;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI;YACF,MAAM,eAAe,MAAM,kHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,MAAM,CAAC;gBAC7C,OAAO;oBAAE,IAAI,SAAS,GAAG,QAAQ;gBAAI;gBACrC,MAAM;oBACJ,aAAa,gBAAgB,YAAY,cAAc;gBACzD;YACF;YAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAM,OAAO;YAAa;QAChE,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,yBAAyB;YACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBACE,SAAS;gBACT,OAAO;gBACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG,OAAO;YAC3D,GACA;gBAAE,QAAQ;YAAI;QAElB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG,OAAO;QAC3D,GACA;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}